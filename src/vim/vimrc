" dein Scripts-----------------------------

if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.local/var/cache" | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.local/etc"       | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share"     | endif
if empty($XDG_STATE_HOME)  | let $XDG_STATE_HOME  = $HOME."/.local/state"     | endif

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)

set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)
set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p', 0700)

if !has('nvim') " Neovim has its own special location
  set viminfofile=$XDG_STATE_HOME/vim/viminfo
endif

" dein install dir
" install dir {{{
let s:vim_dir = expand('$XDG_DATA_HOME/vim')
let s:dein_dir = s:vim_dir . '/dein'
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
let s:plugin_dir = s:vim_dir . '/bundle'
" }}}

" dein instllation check {{{
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone --depth=1 https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . s:dein_repo_dir
endif
" }}}

" begin settings {{{
if dein#load_state(s:plugin_dir)
  call dein#begin(s:plugin_dir)

  " Let dein manage dein (Required)
  call dein#add(s:dein_dir)

  " .toml files
  let s:config_dir = expand('$XDG_CONFIG_HOME/vim/conf')
  if !isdirectory(s:config_dir)
    call mkdir(s:config_dir, 'p')
  endif

  " read toml files
  call dein#load_toml(s:config_dir . '/dein.toml', {'lazy': 0})
  call dein#load_toml(s:config_dir . '/lazy_dein.toml', {'lazy': 1})

  " end settings
  call dein#end()
  call dein#save_state()
endif
" }}}

" plugin installation check {{{
if dein#check_install()
  call dein#install()
endif
" }}}

" plugin remove check {{{
let s:removed_plugins = dein#check_clean()
if len(s:removed_plugins) > 0
  call map(s:removed_plugins, "delete(v:val, 'rf')")
  call dein#recache_runtimepath()
endif
" }}}


if has('persistent_undo')
  set undofile
endif

" End dein Scripts-------------------------

filetype plugin indent on

" display line number
set relativenumber number

" line highlight
set cursorline
augroup auto-cursorcolumn
  autocmd!
  autocmd CursorMoved,CursorMovedi,WinLeave * setlocal nocursorcolumn
  autocmd CursorHold,CursorHoldi * setlocal cursorcolumn
augroup END

" syntax highlight
syntax enable

" search highlight
set hlsearch

" auto search
set incsearch

" show command candidates
set wildmenu

" clip board
set clipboard+=unnamed,unnamedplus

" encode (Try to use UTF-8)
set fileencodings=utf-8,cp932

" file format
set fileformats=unix

" smart indent
set smartindent

" convert tab to spaces
set expandtab

" tab size
set tabstop=2

" auto indent
set shiftwidth=2

" consecutive spaces
set softtabstop=2

" Disable wrap
set nowrap

" Mouse
"set mouse=a

" Auto reload vimrc
augroup source-vimrc
  autocmd!
  autocmd BufWritePost *vimrc source ${MYVIMRC} | set foldmethod=marker
  autocmd BufWritePost *gvimrc if has ('gui_running') source ${MYVIMRC}
augroup END

" Keymap settings--------------------------

" map leader key
let mapleader = "\<Space>"

" Command line mode
nmap <leader>; :

" Esc key
inoremap jj <Esc>

" Quit
nmap <leader>q :q<CR>
nmap <leader>Q :q!<CR>

" Save
nmap <leader>w :w<CR>
nmap <leader>W :wq<CR>

" Select all
nmap <leader>a mvggVG$

" Swich window
nmap <leader><leader> <C-w>w

" Redo with SHIFT + U
nmap U <c-r>

" Jump to next/prev section with Ctrl + j and  Ctrl + k
nmap <C-j> }
nmap <C-k> {

" END OF VIMRC-----------------------------
