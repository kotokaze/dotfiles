[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  set helplang=ja
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = ['async.vim']
hook_add='''
  noremap <silent> <C-]> : <C-u>LspDefinition<CR>
  noremap <silent> K : <C-u>LspDocumentDiagnostics<CR>
  noremap <silent> gd : <C-u>LspDeclaration<CR>
  noremap <silent> gr : <C-u>LspReferences<CR>
  noremap <silent> gn : <C-u>LspNextError<CR>
  noremap <silent> gp : <C-u>LspPreviousError<CR>
  noremap <silent> gh : <C-u>LspHover<CR>
  noremap <silent> gtd : <C-u>LspTypeDefinition<CR>
  noremap <silent> gth : <C-u>LspTypeHierarchy<CR>
  noremap <silent> gst : <C-u>LspStatus<CR>
  noremap <silent> <F2> : <C-u>LspRename<CR>
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends =  ['vim-lsp']
hook_add = '''
  let g:lsp_settings = {
    \ 'pyls-all': {
    \   'initialization_options': {
    \     'InterpreterPath': exepath('python3')
    \   }
    \ },
    \ }
'''
#    \ clangd: {
#    \  'cmd': ['clangd-6.0']
#    \ }},
#
#'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
let g:vista_default_executive = 'vim_lsp'
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['nvim-yarp', 'vim-hug-neovim-rpc']
hook_source = '''
  let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'lighttiger2505/deoplete-vim-lsp'
on_i = 1
depends = ['deoplete.nvim']
hook_add = '''
inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''

[[plugins]]
repo = 'ujihisa/neco-look'
depends = [ 'deoplete.nvim']
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = 'neosnippet-snippets'
on_i = 1
hook_add = '''
  imap <expr><C-k> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<Tab>"
  smap <expr><Tab> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<Tab>"
  smap <expr><C-k> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)" : "\<Tab>"
  xmap <expr><C-k> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_target)" : "\<Tab>"
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'prabirshrestha/asyncomplete-neosnippet.vim'
depends = ['neosnippet.vim']
on_i = 1

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_sign_column_always = 1
    let g:ale_fix_on_save = 1
    let g:ale_completion_enabled = 1
    let g:ale_sign_error = '⨉'
    let g:ale_sign_warning = '⚠'
    let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
    let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
    let g:ale_linters = {
        \   'c' : ['clangd'],
        \   'cpp' : ['clangd']
    \}
'''

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'
on_ft = ['c', 'cpp']
hook_source = '''
    nmap <leader>dox :Dox<CR>
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_i = 1

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_i = 1

[[plugins]]
repo = 'tomtom/tcomment_vim'
on_i = 1

[[plugins]]
repo = 'previm/previm'

[[plugins]]
repo = 'markonm/traces.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown', 'md']

