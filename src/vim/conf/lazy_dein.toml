# Coc Extentions ***************************************

[[plugins]]
repo = 'weirongxu/coc-calc'
depends = ['coc.nvim']

[[plugins]]
repo = 'iamcco/coc-spell-checker'
depends = ['coc.nvim']

# Language supports
[[plugins]]
repo = 'clangd/coc-clangd'
on_ft = ['c', 'cpp', 'objc', 'objcpp']
depends = ['coc.nvim']

[[plugins]]
repo = 'neoclide/coc-css'
on_ft = ['css', 'scss', 'less']
depends = ['coc.nvim']
hook_source = '''
  autocmd FileType css setl iskeyword+=-
  autocmd FileType scss setl iskeyword+=@-@
'''

[[plugins]]
repo = 'josa42/coc-go'
on_ft = ['go']
depends = ['coc.nvim']

[[plugins]]
repo = 'neoclide/coc-json'
on_ft = ['json']
depends = ['coc.nvim']

[[plugins]]
repo = 'fannheyward/coc-pyright'
on_ft = ['python']
depends = ['coc.nvim']

[[plugins]]
repo = 'fannheyward/coc-rust-analyzer'
on_ft = ['rust']
depends = ['coc.nvim']

[[plugins]]
repo = 'josa42/coc-sh'
depends = ['coc.nvim']

[[plugins]]
repo = 'fannheyward/coc-texlab'
depends = ['coc.nvim']

[[plugins]]
repo = 'kkiyama117/coc-toml'
on_ft = ['toml']
depends = ['coc.nvim']

[[plugins]]
repo = 'fannheyward/coc-xml'
on_ft = ['xml']
depends = ['coc.nvim']

[[plugins]]
repo = 'neoclide/coc-yaml'
on_ft = ['yaml']
depends = ['coc.nvim']

# ******************************************************

# Translation
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
  set helplang=ja
'''

# Doxygen
[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'
on_ft = ['c', 'cpp']
hook_source = '''
    nmap <leader>dox :Dox<CR>
'''

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
  augroup my-glyph-palette
    autocmd! *
    autocmd FileType fern call glyph_palette#apply()
    autocmd FileType nerdtree,startify call glyph_palette#apply()
  augroup END
'''

# Icons
[[plugins]]
repo = 'ryanoasis/vim-devicons'
depends = ['glyph-palette.vim']
hook_source = '''
  set encoding=UTF-8
  let g:WebDevIcons_enable_nerdtree = 1
  let g:WebdevIcons_enable_ctrlp = 1
  let g:WebdevIcons_enable_vimfiler_git_status = 1
'''

# Filer
[[plugins]]
repo = 'preservim/nerdtree'
depends = ['vim-devicons']
hook_add = '''
  " Disable VIM default filer
  let g:loaded_netrw=1
  let g:loaded_netrwPlugin=1
  let g:loaded_netrwSettings=1
  let g:loaded_netrwFileHandlers=1

  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter *
    \ if argc() > 0 | execute 'NERDTree' argv()[0] | wincmd p |
    \   if isdirectory(argv()[0]) | enew | execute 'cd '.argv()[0] | endif |
    \ else | NERDTree |
    \ endif

  " Exit Vim if NERDTree is the only window remaining in the only tab.
  " Close the tab if NERDTree is the only window remaining in it.
  " If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
  autocmd BufEnter *
    \ if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit |
    \ elseif winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit |
    \ elseif bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \   let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf |
    \ endif

  nmap <silent> <C-n> :NERDTreeToggle<CR>
  nmap <silent> <C-f> :NERDTreeFind<CR>
'''

# Emoji
[[plugins]]
repo = 'junegunn/vim-emoji'
hook_source = '''
  set completefunc=emoji#complete
'''

# Git
[[plugins]]
repo = 'tpope/vim-fugitive'

# Git diff
[[plugins]]
repo = 'airblade/vim-gitgutter'
depends = ['vim-emoji']
hook_add = '''
  autocmd BufReadPre * GitGutterEnable
  autocmd BufReadPre *.log GitGutterDisabled
  let g:gitgutter_highlight_lines = 0
  let g:gitgutter_highlight_linenrs = 1

  let g:gitgutter_sign_added = emoji#for('small_blue_diamond')
  let g:gitgutter_sign_modified = emoji#for('small_orange_diamond')
  let g:gitgutter_sign_removed = emoji#for('small_red_triangle')
  let g:gitgutter_sign_modified_removed = emoji#for('collision')

  set updatetime=250  " update interval for gitgutter (default 4000)

  " Jump to next/previous
  nmap [g :GitGutterPrevHunk<CR>
  nmap ]g :GitGutterNextHunk<CR>

  " Custom colors
  highlight GitGutterAdd ctermfg=green
  highlight GitGutterChange ctermfg=blue
  highlight GitGutterDelete ctermfg=red
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_i = 1

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
hook_add = '''
  let g:better_whitespace_enabled=1
  let g:strip_whitespace_on_save=1
  let g:show_spaces_that_precede_tabs=1

  " highlight ExtraWhitespace ctermbg=9 guibg=#FF0000

  " highlight whitespace in markdown files, though stripping remains disabled by the blacklist
  " autocmd FileType markdown EnableWhitespace

  " Do not modify kernel files, even though their type is not blacklisted and highlighting is enabled
  autocmd BufRead /usr/src/linux* DisableStripWhitespaceOnSave
'''

# Comment out based on file type
[[plugins]]
repo = 'tomtom/tcomment_vim'

# Preview replacements
[[plugins]]
repo = 'markonm/traces.vim'

# Open browser
[[plugins]]
repo = 'tyru/open-browser.vim'

# Markdown preview
[[plugins]]
repo = 'previm/previm'
depends = ['open-browser.vim']
on_ft = ['markdown', 'md']
hook_add = '''
  let g:previm_enable_realtime = 1
'''

# Markdown table
[[plugins]]
repo = 'mattn/vim-maketable'
on_ft = ['markdown', 'md']
