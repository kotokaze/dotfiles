# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
export XDG_CACHE_HOME="${HOME}/.cache"
if [[ -r "${XDG_CACHE_HOME}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
  print -P "%F{33}▓▒░ %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
  command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
  command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
  zdharma-continuum/zinit-annex-as-monitor \
  zdharma-continuum/zinit-annex-bin-gem-node \
  zdharma-continuum/zinit-annex-patch-dl \
  zdharma-continuum/zinit-annex-rust

### End of Zinit's installer chunk

#  Completion
zinit wait'1' lucid light-mode for \
  atload"_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions \
  atinit"zicompinit; zicdreplay" \
    zdharma/fast-syntax-highlighting \
  blockf atpull'zinit creinstall -q .' \
    zsh-users/zsh-completions

# Customize completion
export ZSH_AUTOSUGGEST_STRATEGY=(completion)
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#ff00ff,bg=cyan,underline"
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
bindkey '	' autosuggest-accept
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'  # Case-insensitive

# Colorize `ls` results
# zinit ice atclone"dircolors -b LS_COLORS > clrs.zsh" \
#  atpull'%atclone' pick"clrs.zsh" nocompile'!' \
#  atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”'
# zinit light trapd00r/LS_COLORS
# zinit pack for ls_colors

# Enable p10k
zinit ice depth=1; zinit light romkatv/powerlevel10k

# To customize prompt, run `p10k configure` or edit p10k.zsh
[[ ! -f "${HOME}/.config/zsh/p10k.zsh" ]] || source "${HOME}/.config/zsh/p10k.zsh"

# ***********************************************


export HOMEBREW_NO_AUTO_UPDATE=1
export DISPLAY=localhost:0

export CONFIGURE_OPTS="--with-openssl=$(brew --prefix openssl@1.1)"
export LDFLAGS="-L$(brew --prefix openssl@1.1)/lib"
export CPPFLAGS="-I$(brew --prefix openssl@1.1)/include"
export PATH="$(brew --prefix openssl@1.1)/bin:${PATH}"

export LDFLAGS="-L/opt/homebrew/opt/readline/lib:${LDFLAGS}"
export CPPFLAGS="-I/opt/homebrew/opt/readline/include:${CPPFLAGS}"

export GOPATH="${HOME}/ws/go"
export LOCALOPT="${HOME}/.local/opt"
export ANYENV_ROOT="${LOCALOPT}/anyenv"
export RUSTUP_HOME="${LOCALOPT}/rustup"
export CARGO_HOME="${LOCALOPT}/cargo"

test -e "${CARGO_HOME}/env" && source "${CARGO_HOME}/env"
test -e "${HOME}/.local/scripts/iterm2_shell_integration.zsh" && source "$_"

if [ -d $ANYENV_ROOT ]; then
  export PATH="${ANYENV_ROOT}/bin:${PATH}"
  eval "$(anyenv init -)"
  test -e "${PYENV_ROOT}/plugins/pyenv-virtualenv" && eval "$(pyenv virtualenv-init -)"
fi

alias pass='cat /dev/urandom | base64 | fold -w 15 | head -n 1 | tee /dev/stderr | pbcopy'
# alias ffmpeg='docker run --rm -v `pwd`:/tmp/workdir jrottenberg/ffmpeg:3.3'
# alias MP4Box='docker run --rm -v `pwd`:/work sambaiz/mp4box'
# alias java_home='/usr/libexec/java_home'
alias cd-git-root='cd $(git rev-parse --show-toplevel)'
alias ll='ls -alF'

function gi() { curl -sLw n https://www.toptal.com/developers/gitignore/api/$@ ;}
